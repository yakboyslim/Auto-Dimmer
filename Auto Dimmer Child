/**
 *  ****************  Auto Dimmer Child App  ****************
 *
 *  Design Usage:
 *  Auto set dimmer levels to match outdoor conditions
 *
 *  Code and ideas used from @Botched1 and @MikeMAxwell on Hubitat forums.
 *  
 *-------------------------------------------------------------------------------------------------------------------
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------------------------------------------------------------------------------
 *
 *  Changes:
 *
 *  V1.0.0 - 12/1/2019 - Initial release.
 *  V1.0.1 - 12/2/2019 - Remove debug logs used to help write the app.
 *  V1.0.2 - 12/9/2019 - Added app events.
 */

definition(
    name:"Auto Dimmer Child",
    namespace: "yakboyslim",
    author: "Sam Crouse",
    description: "Auto set dimmer levels to match outdoor conditions",
    category: "",

	parent: "yakboyslim:Auto Dimmer",
    
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: "",
)

preferences {
    page(name: "pageConfig")
}

def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unsubscribe()
    initialize()
}

def initialize() {
	setDefaults()
	if(pause1==false){
        subscribeNow()
        getInitialLevel()
    }
}

def pageConfig() {
    dynamicPage(name: "pageConfig", title: "<h2 style='color:#00CED1;font-weight: bold'>Dimmer Sync</h2>", nextPage: null, install: true, uninstall: true, refreshInterval:0) {	
	display()
    
	section("Instructions:", hideable: true, hidden: true) {
		paragraph "<b>Notes:</b>"
		paragraph "- dimmers and illuminance sensors you want to keep in sync."
	}
		
	section(getFormat("header-darkcyan", "Select Master Illuminance Sensor")) {
		input "luxLevel", "capability.illuminanceMeasurement", title: "Select Master Illuminance Sensor", submitOnChange: true, hideWhenEmpty: true, required: true, multiple: false
	}
	section(getFormat("header-darkcyan", " Select Slave Dimmer Device(s)")) {
		input "slaveDimmer", "capability.switchLevel", title: "Select Slave Dimmer Device(s)", submitOnChange: true, hideWhenEmpty: true, required: true, multiple: true
		input "keepInSync", "bool", title: "Check to keep dimmers in sync during illuminance changes (else only change during ON events)", required: false, defaultValue: false
	}
	section(getFormat("header-darkcyan", " General")) {label title: "Enter a name for this child app", required: false}
	section() {
		input(name: "logEnable", type: "bool", defaultValue: "true", title: "Enable Debug Logging", description: "Enable extra logging for debugging.")
   	}
	section(getFormat("header-darkcyan", " Levels")) {
		input "levelsYes", "bool", title: "Modify Level Settings from Defaults", required: true, defaultValue: false, submitOnChange: true	
			if(levelsYes){	
		    input "darkLux", "number", title: "Below this level it is Dark", required: true, defaultValue: 40
            input "darkDim", "number", title: "When dark set to this level", required: true, defaultValue: 2
		    input "duskLux", "number", title: "Between dark and this level it is dusk", required: true, defaultValue: 400
            input "duskDim", "number", title: "When at dusk illuminance set to this level", required: true, defaultValue: 20
		    input "ovcLux", "number", title: "Between dusk and this level it is overcast", required: true, defaultValue: 1500
            input "ovcDim", "number", title: "When at overcast illuminance set to this level", required: true, defaultValue: 40
            input "sunLux", "number", title: "Between overcast and this level it is partial sun", required: true, defaultValue: 3000
            input "sunDim", "number", title: "When at or above partial sun illuminance set to this level", required: true, defaultValue: 100
			}
   	}
	section(getFormat("header-darkcyan", " Restrictions")) {
		input "modesYes", "bool", title: "Enable ON/dimmer restrictions", required: true, defaultValue: false, submitOnChange: true	
			if(modesYes){	
			input(name:"modes", type: "mode", title: "Allow ON/dimmer actions when current mode is:", multiple: true, required: false)
			input(name:"onoffSwitch", type: "capability.switch", title: "Enable/Disable Sync with External Switch:", multiple: false, required: false)
			}
   	}
	display2()
	}
}

def getFormat(type, myText=""){
	if(type == "header-green") return "<div style='color:#ffffff;font-weight: bold;background-color:#81BC00;border: 1px solid;box-shadow: 2px 3px #A9A9A9'>${myText}</div>"
	if(type == "header-darkcyan") return "<div style='color:#ffffff;font-weight: bold;background-color:#008B8B;border: 1px solid;box-shadow: 2px 3px #A9A9A9'>${myText}</div>"
    if(type == "line") return "\n<hr style='background-color:#00CED1; height: 1px; border: 0;'></hr>"
	if(type == "title") return "<div style='color:#00CED1;font-weight: bold; font-style: italic'>${myText}</div>"
}

def LOGDEBUG(txt){
    try {
		if (settings.logEnable) { log.debug("${app.label} - ${txt}") }
    } catch(ex) {
    	log.error("${app.label} - LOGDEBUG unable to output requested data!")
    }
}

def pauseOrNot(){
	LOGDEBUG("In pauseOrNot...")
    state.pauseNow = pause1
        if(state.pauseNow == true){
            state.pauseApp = true
            if(app.label){
            if(app.label.contains('red')){
                log.warn "Paused"}
            else{app.updateLabel(app.label + ("<font color = 'red'> (Paused) </font>" ))
              LOGDEBUG("App Paused - state.pauseApp = $state.pauseApp ")   
            }
            }
        }
     if(state.pauseNow == false){
         state.pauseApp = false
         if(app.label){
     if(app.label.contains('red')){ app.updateLabel(app.label.minus("<font color = 'red'> (Paused) </font>" ))
     	LOGDEBUG("App Released - state.pauseApp = $state.pauseApp ")                          
        }
     }
  }    
}

def setDefaults(){
    pauseOrNot()
    if(pause1 == null){pause1 = false}
	state.modeCheck = true
	state.modesYes = modesYes
	state.modes = modes
    if(state.pauseApp == null){state.pauseApp = false}
	if(logEnable == null){logEnable = false}
	LOGDEBUG("state.modes = " + state.modes)
	LOGDEBUG("state.modesYes = " + state.modesYes)
	if(state.modes != null && state.modesYes == true){
		LOGDEBUG("Going to modecheck from SetDefaults")
		modeCheck()}
}

def subscribeNow() {
	unsubscribe()
	subscribe(luxLevel, "illuminance", luxHandler)
    subscribe(slaveDimmer, "switch", switchHandler)
    subscribe(slaveDimmer, "switchLevel")
	subscribe(location, "mode", statusHandler)
	if (onoffSwitch) {
		subscribe(onoffSwitch, "switch", onoffSwitchHandler)
	}
}

def luxHandler(evt) {
	LOGDEBUG("Event Value: " + evt.value)
		LOGDEBUG("Illuminance Level Check")

		def crtlux = luxLevel.currentValue("illuminance").toInteger()
        oldlevel = state.newlevel
		newlevel = state.newlevel
        
		if(state.modeCheck == false)
		{
			LOGDEBUG("Not in correct 'mode' to continue")
			return
		}
		
		if (onoffSwitch) 
		{
			if (onoffSwitch.currentValue("switch") == "off") 
			{
				LOGDEBUG("External enable/disable switch is OFF")
				return
			}
		}
		
        if (crtlux<=darkLux){
            newlevel = darkDim
            LOGDEBUG("Less than Dark")
        } else if (crtlux<duskLux){
            newlevel = darkDim + ((duskDim - darkDim) * ((crtlux - darkLux) / (duskLux - darkLux)))
            LOGDEBUG("Dark-Dusk")        
        } else if (crtlux<ovcLux){
            newlevel = duskDim + ((ovcDim - duskDim) * ((crtlux - duskLux) / (ovcLux - duskLux)))
            LOGDEBUG("Dusk-Overcast")
        } else if (crtlux<sunLux){
            newlevel = ovcDim + ((sunDim - ovcDim) * ((crtlux - ovcLux) / (sunLux - ovcLux)))
            LOGDEBUG("Overcast-Sunny")
        } else if (crtlux>=sunLux){
            newlevel = sunDim
            LOGDEBUG("Sunny")
        }
        newlevel = newlevel.toInteger()
    
    if (newlevel == state.newlevel){
        LOGDEBUG("No adjustment needed")
        return
    }
    
    state.newlevel = newlevel
    LOGDEBUG("Lux is " + crtlux + ". So level will be set to " + newlevel)

    if (keepInSync == true){
        LOGDEBUG("Adjusting Dimmers")
        slaveDimmer.each{
            if (it.currentValue("switch") == "on" & it.currentValue("level") == oldlevel){
	        LOGDEBUG("Setting " + it + " to level " + newlevel)
            sendEvent(name:"${app.label}", value: "${it} - Level ${newlevel}", descriptionText: "${it} set to Level ${newlevel} because lux changed")
		    it.setLevel(newlevel)
            } else{
                LOGDEBUG("Not setting " + it + " because it is currently " + it.currentValue("switch") + ":" + it.currentValue("level"))
            }
        }     
	}
    return state.newlevel
}

def getInitialLevel(){
    def crtlux = luxLevel.currentValue("illuminance").toInteger()
        if (crtlux<=darkLux){
            newlevel = darkDim
            LOGDEBUG("Less than Dark")
        } else if (crtlux<duskLux){
            newlevel = darkDim + ((duskDim - darkDim) * ((crtlux - darkLux) / (duskLux - darkLux)))
            LOGDEBUG("Dark-Dusk")        
        } else if (crtlux<ovcLux){
            newlevel = duskDim + ((ovcDim - duskDim) * ((crtlux - duskLux) / (ovcLux - duskLux)))
            LOGDEBUG("Dusk-Overcast")
        } else if (crtlux<sunLux){
            newlevel = ovcDim + ((sunDim - ovcDim) * ((crtlux - ovcLux) / (sunLux - ovcLux)))
            LOGDEBUG("Overcast-Sunny")
        } else if (crtlux>=sunLux){
            newlevel = sunDim
            LOGDEBUG("Sunny")
        }
        newlevel = newlevel.toInteger()
    
    state.newlevel = newlevel
    LOGDEBUG("Lux is " + crtlux + ". So level will be set to " + newlevel)

    return state.newlevel
}

def switchHandler(evt){
	LOGDEBUG(evt.displayName + " was turned " + evt.value)
	
    def dimmer = evt.deviceId
    def newlevel = state.newlevel
    
	if(state.modeCheck == false)
	{
		LOGDEBUG("Not in correct 'mode' to change dimmer level")
		return
	}
	
	if (onoffSwitch) 
	{
		if (onoffSwitch.currentValue("switch") == "off") 
		{
			LOGDEBUG("External enable/disable switch is OFF")
			return
		}
	}
		
    if (evt.value == "on"){
            evt.device.setLevel(newlevel,5)
            sendEvent(name:"${app.label}", value: "${evt.displayName} - Level ${newlevel}", descriptionText: "${evt.displayName} set to Level ${newlevel} because it was turned ON")
            LOGDEBUG(evt.displayName + " set to " + newlevel)
	}
}

def modeCheck() {
    LOGDEBUG("Checking for any 'mode' restrictions...")
	LOGDEBUG("modes = " + modes)
	LOGDEBUG("state.modes = " + state.modes)
	LOGDEBUG("!modes = " + !modes)
	LOGDEBUG("location.mode = " + location.mode)
	LOGDEBUG("modes.contains(location.mode) = " + modes.contains(location.mode))
	def result = !modes || modes.contains(location.mode)
    LOGDEBUG("Mode = $result")
    state.modeCheck = result
    return state.modeCheck
}

def statusHandler(evt){
  LOGDEBUG("Location status updated. Running modeCheck")
  modeCheck()
}

def onoffSwitchHandler(evt){
  	LOGDEBUG("Enable/Disable Switch updated.Event Value: " + evt.value)
}

def display() {
	section() {
		paragraph getFormat("line")
		input "pause1", "bool", title: "Pause This App", required: true, submitOnChange: true, defaultValue: false
	}
}

def display2() {
	section() {
		paragraph getFormat("line")
		paragraph "<div style='color:#00CED1;text-align:center'>Auto Dimmer Child - App Version: 1.0.2</div>"
	}
}

